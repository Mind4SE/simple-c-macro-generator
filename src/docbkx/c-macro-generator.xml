<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book[
<!ENTITY % myents SYSTEM "./shared.ent" >
%myents;
]>
<book status="draft" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
  <info>
    <title><emphasis>&productName;</emphasis> User Guide</title>
    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>
        <date>2014-09-03</date>
        <author>
          <personname>
            <firstname>Julien</firstname>
            <surname>TOUS</surname>
          </personname>
        </author>
        <revremark>First revision of <emphasis>&productName;</emphasis> User Guide</revremark>
      </revision>
      <revision>
        <revnumber>0.2</revnumber>
        <date>2014-09-22</date>
        <author>
          <personname>
            <firstname>Fran√ßois</firstname>
            <surname>DELOYE</surname>
          </personname>
        </author>
        <revremark>Typos fixes</revremark>
      </revision>
    </revhistory>
  </info>

  <chapter>
    <title>Introduction</title>

    <section>
      <title>Aim of this document</title>

      <para>This document introduces the <emphasis>&productName;</emphasis> plugin to the mind
        compiler and demonstrates its usage using examples.</para>
      <para>Specifically in this document, the <emphasis>&productName;</emphasis> plugin will be
        used to analyse the source code of a Mind project using Klocwork tool. </para>
    </section>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sections/c-macro-generator_aim.xml"/>
  </chapter>
  <chapter>
    <title>Overview</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sections/c-macro-generator_usage.xml"/>


  </chapter>
  <chapter>
    <title>Static analysis</title>
    <section>
      <title>Overview of the demonstration application</title>
      <para> Let us consider a simple super-over-engineered calculator application. It can handle
        simple integer calculation from the command line such as <code>1 + 2</code>, and print the
        result to the standard output. It can be build using the command <code>make all</code> of
        the standard makefile. The resulting executable will be located in the
          <code>target/Default/binaries/</code> folder. </para>
      <example>
        <title>Sample executions</title>
        <programlisting language="sh">$ ./target/Default/binaries/calc 2 + 2
4
$ ./target/Default/binaries/calc 4 / 2
2
$ ./target/Default/binaries/calc -2 - 25
-27
$ # Note that * needs to be escaped as it is a special shell token
$ ./target/Default/binaries/calc -2 '*' 25  
-50</programlisting>
      </example>

      <para> Its architecture is described in the following diagram. </para>
      <example>
        <title>Application overview</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="images/Overview.svg" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>
      <para>
        <itemizedlist>
          <listitem>
            <para><code>cliParser</code> component handles the command line and delegates the
              calculation to the corresponding <code>binaryOperation</code> component. Its
              implementation is located in the <code>/main/CLIParser.c</code> file.</para>
          </listitem>
          <listitem>
            <para>Component <code>binaryAdd</code> implements the addition, the corresponding source
              is located in the <code>/operation/Add.c</code> file and so on.</para>
          </listitem>
        </itemizedlist>
      </para>


    </section>
    <section>
      <title>Generation of static-analysis friendly code</title>
      <para>Using <code>--simple-gen</code> flag to the compilation options in the
          <code>Default.properties</code> file, the generated code can be processed by a
        static-analysis tool. </para>
      <para>But doing so prevents compiling the application .</para>
      <para>Since, the use of the <code>--simple-gen</code> flag to the compilation options would
        prevents compiling the application (remember that the <emphasis>&productName;</emphasis>
        plugin does not generate code for a whole application), a new target <code>analysis</code>
        is added to the <code>Makefile</code>, that is dedicated to the generation of code for
        static-analysis purpose. </para>
      <para>By copy/past/modifying the <code>Makefile</code> we get :</para>
      <example>
        <title>Modified makefile</title>
        <programlisting language="sh">analysisOutputDir=$(confOutputDirVar)/analysis

build_analysis: dependencies
	mkdir -p $(analysisOutputDir)
	$(MINDC) --simple-gen $(sourcePathArg) $(includePathArg) $(compilerCommandArg) $(linkerCommandArg) $(assemblerCommandArg) $(asFlagsArg) $(cppFlagsArg) $(cFlagsArg) $(ldFlagsArg) $(extraOptionsArg) -o=$(analysisOutputDir) $(targetComponent):$(binaryName)

analysis: build_analysis
	for m in $(shell find $(analysisOutputDir) -name *.make); do  make CC=$(compilerCommand) -f $$m; done</programlisting>
      </example>

      <para> This new <code>analysis</code> target will create a new directory
          <code>target/Default/analysis/</code>, generate in it the code for the analysis of the
        application, and compile each component definition using the generated makefiles. </para>
      <para> This target does involve static-analysis yet. This is the topic for the next sections. </para>


    </section>

    <section>
      <title>Klocwork</title>
      <para> The pre-requisite are for running a Klocwork analysis on this example are : </para>

      <itemizedlist>
        <listitem>
          <para>A local Klocwork install. (refer to <ulink
              url="http://www.klocwork.com/products/documentation/current/Klocwork_Insight_Documentation"
            />)</para>
        </listitem>
        <listitem>
          <para>A Klocwork account on a Klocwork host.
            <!--(refer to <ulink url="http://pso.schneider-electric.com/wiki/index.php/Global_Security_Lab" />) -->
          </para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Klocwork project creation on the Klocwork host.</title>
        <para> From a web browser, login to the Klocwork host and create a project. The address of
          the Klocwork host will be referred later as <code>$KW_HOST</code> (Something like
            <code>http://the.internet.host.address:8082</code>). The project name will we referred
          as <code>$KW_PROJECT</code>, (<code>calculator-application</code> in our case). </para>
        <example>
          <title>Login and project creation</title>

          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" fileref="images/Login.png" scale="50"/>
            </imageobject>
          </mediaobject>
          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" fileref="images/NewProject.png" scale="50"/>
            </imageobject>
          </mediaobject>
        </example>
        <para> Click the configuration tab of the created project and select your checking rules.
          Mind will generate both function like macro and macro with unparenthesized argument
          (string manipulation). So you better uncheck those rules (or accept unavoidable report
          about them). </para>
        <example>
          <title>Project configuration</title>

          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" fileref="images/Configuration.png" scale="50"/>
            </imageobject>
          </mediaobject>
        </example>


      </section>
      <section>
        <title>Running the analysis</title>
        <para> On your development environment run the following commands : </para>
        <example>
          <title>Buildspec command</title>
          <programlisting language="sh">kwinject --output buildspec.out make analysis</programlisting>
        </example>
        <para> Will analyse the compilation steps from the command <code>make analysis</code> and
          create the <code>buildspec.out</code> which is necessary for the next step. </para>
        <example>
          <title>Analysis command</title>
          <programlisting language="sh">kwbuildproject --force --url $KW_HOST/$KW_PROJECT \
--tables-directory tablesDir buildspec.out</programlisting>
        </example>
        <para> Will launch the analysis and produce report in the <code>tablesDir</code> directory. </para>
        <example>
          <title>Issue tracking</title>
          <programlisting language="sh">kwadmin --url $KW_HOST load $KW_PROJECT tablesDir  		</programlisting>
        </example>
        <para>Will load the results to the Klocwork host which provides a nice interface to view the
          reports, and tracking of the issues</para>
      </section>
      <section>
        <title>Examining the defects</title>
        <para> From the klocwork host pages in your web browser (A refresh might be necessary) you
          can now view the detected issues in your application. </para>
        <example>
          <title>Issues summary</title>

          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" fileref="images/IssuesSummary.png" scale="50"/>
            </imageobject>
          </mediaobject>
        </example>
        <example>
          <title>Issue detail</title>

          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" fileref="images/IssueSpecific.png" scale="50"/>
            </imageobject>
          </mediaobject>
        </example>

      </section>
    </section>

  </chapter>
</book>
