template st.definitions.simple.Component: st.common.ComponentHelper
  implements st.definitions.header.ComponentDefinitionHeader {

st.membrane.ControllerGenerator ctrlGenerator = plugin(st.membrane);

$${

// -----------------------------------------------------------------------------
// Implementation of the ComponentDefinitionHeader interface
// -----------------------------------------------------------------------------

ComponentDefinitionHeader(definition) ::= <<
/* Generated file: <definition.name;format="nameToPath">.adl.h */
#ifndef __COMPONENT_<definition.name;format="toUpperCName">_ADL_H
#define __COMPONENT_<definition.name;format="toUpperCName">_ADL_H

#include "mindcommon.h"

#define DEFINITION_NAME <definition.name;format="toCName">

#include "commonMacro.h"

/* Start the used interface descriptions */
<UsedInterfaceDefinitions(definition=definition)>
/* End the used interface descriptions */


/* Start the server interface descriptions */
<definition.interfaces:{<if(isServer.(it.role))><ServerDecls(it)><endif>}; separator="\n">
/* End the server interface descriptions */

/* Start the client interface descriptions */
<definition.interfaces:{<if(isClient.(it.role))><ClientDecls(it)><endif>}; separator="\n">
/* End the client interface descriptions */

<PrivateDecl(definition)>

<if (definition.astNodeTypes.("component"))>
/* Start including the sub-component descriptions */
<definition.components:{#include "<it.definitionReference.name;format="nameToPath">.adl.h"}; separator="\n">
/* End including the sub-component descriptions */
<endif>

<if (definition.astNodeTypes.("attribute"))>
/* Start including the attribute IDT */
<definition.attributes:{<if (it.idt)>#include "<it.idt; format="toCPath">"<endif>}; separator="\n">
/* End including the attribute IDT */
<endif>

<if (definition.astNodeTypes.("dataField"))>
/* Start including the data field IDT */
<definition.dataFields:{<if (it.idt)>#include "<it.idt; format="toCPath">"<endif>}; separator="\n">
/* End including the data field IDT */
<endif>

<AttributeStructures(definition)>

#endif // __COMPONENT_<definition.name;format="toUpperCName">_ADL_H
>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

ServerDecls(itf) ::=<<
#include "<itf.signature; format="nameToPath">.itf.h"
<itf.astDecorations.("interfaceDefinition").methods:{<methodMethDef(itf=itf, method=it, withThisPtr="false")>;}; separator="\n">
struct __component_<itf.astDecorations.("interfaceDefinition").name; format="toCName">_vTable GET_MY_VTABLE(<itf.name; format="toCName">) = { <itf.astDecorations.("interfaceDefinition").methods:{<methodMethName(itf=itf.name, method=it.name)>}; separator=",">};
<itf.signature; format="toCName"> GET_MY_INTERFACE(<itf.name; format="toCName">) = &GET_MY_VTABLE(<itf.name; format="toCName">);
int GET_COLLECTION_SIZE(<itf.name; format="toCName">) = <if (itf.numberOfElement)><itf.numberOfElement><else>1<endif>;
>>


ClientDecls(itf) ::=<<
#include "<itf.signature; format="nameToPath">.itf.h"
<itf.astDecorations.("interfaceDefinition").methods:{extern <methodMethDef(itf=itf, method=it, withThisPtr="false")>;}; separator="\n">
struct __component_<itf.astDecorations.("interfaceDefinition").name; format="toCName">_vTable GET_MY_VTABLE(<itf.name; format="toCName">)<if (itf.numberOfElement)>[<itf.numberOfElement>]<endif><if (itf.numberOfElement)><else> = { <itf.astDecorations.("interfaceDefinition").methods:{<methodMethName(itf=itf.name, method=it.name)>}; separator=",">}<endif>;
<itf.signature; format="toCName"> GET_MY_INTERFACE(<itf.name; format="toCName">)<if (itf.numberOfElement)>[<itf.numberOfElement>]<endif><if (itf.numberOfElement)><else> = &GET_MY_VTABLE(<itf.name; format="toCName">);<endif>;
int GET_COLLECTION_SIZE(<itf.name; format="toCName">) = <if (itf.numberOfElement)><itf.numberOfElement><else>1<endif>;
>>


typeQualifier(qualifiers) ::= <<
<constQualiferMap.(qualifiers.isConst)><volatileQualifierMap.(qualifiers.isVolatile)>
>>

constQualiferMap ::= [
  "true" : "const ",
  "false": ""
]

volatileQualifierMap ::= [
  "true" : "volatile ",
  "false": ""
]

varDef(type, name) ::= <<
<(varDefTemplateMap.(type.astDecorations.kind))(type=type, name=name)>
>>

enumVarDef(type, name) ::= "<enumDef(type=type)> <name>"

enumRefVarDef(type, name) ::= "<enumRefDef(type=type)> <name>"

structVarDef(type, name) ::= "<structDef(type=type)> <name>"

structRefVarDef(type, name) ::= "<structRefDef(type=type)> <name>"

unionVarDef(type, name) ::= "<unionDef(type=type)> <name>"

unionRefVarDef(type, name) ::= "<unionRefDef(type=type)> <name>"

pointerOfVarDef(type, name) ::= "<varDef(type=type.type, name=pointerOfVarName(type=type, name=name))>"

pointerOfVarName(type, name) ::= "(* <typeQualifier(qualifiers=type)><name>)"

arrayOfVarDef(type, name) ::= "<varDef(type=type.type, name=arrayOfVarName(type=type, name=name))>"

arrayOfVarName(type, name) ::= "<name>[<if (type.constantExpression)><expression(expr=type.constantExpression)><endif>]"

simpleVarDef(type, name) ::= <<
<if (primitiveTypeNameMap.(type.name))>
<primitiveTypeNameMap.(type.name)> <name>
<else>
<type.name> <name>
<endif>
>>





typeDef(type) ::= <<
typedef <typeQualifier(qualifiers=type)><varDef(type=type.type, name=type.name)>
>>

structDef(type) ::= <<
struct <type.name> {
  <type.members:memberDef(); separator="\n">
}
>>

structRefDef(type) ::= "struct <type.name>"

unionDef(type) ::= <<
union <type.name> {
  <type.members:memberDef(); separator="\n">
}
>>

unionRefDef(type) ::= "union <type.name>"

memberDef(member) ::= "<typeQualifier(qualifiers=member)><varDef(type=member.type, name=member.name)>;"

enumDef(type) ::= <<
enum <type.name> {
  <type.enumMembers:enumMemberDef(); separator=",\n">
}
>>

enumMemberDef(member) ::= "<member.name><if (member.constantExpression)> = <expression(expr=member.constantExpression)><endif>"

constDef(const) ::= "#define <const.name> <const.value>"

interfaceDef(itf) ::= <<
<interfaceVTableDef(itf)>
<interfaceTypeDef(itf)>
>>

interfaceVTableDef(itf) ::= <<
struct __component_<itf.name; format="toCName">_vTable {
  <itf.methods:{<methodPointerDef(method=it, withThisPtr="false")>;}; separator="\n">
};
>>

interfaceTypeDef(itf) ::= <<
typedef struct __component_<itf.name; format="toCName">_vTable <itf.name; format="toCName">;
>>






expression(expr) ::= <<
<(constantExpressionTemplateMap.(expr.astDecorations.kind))(expr=expr)>
>>


binaryOpertaionExpr(expr) ::= <<
<expr.constantExpressions:{(<expression(expr=it)>)};separator=expr.operation>
>>

unaryOperationExpr(expr) ::= <<
<expr.operation> (<expression(expr=expr.constantExpression)>)
>>

castOperationExpr(expr) ::= <<
((<varDef(type=expr.type, name="")>) <expression(expr=expr.constantExpression)>)
>>

literalExpr(expr) ::= <<
<expr.expr>
>>

constantExpressionTemplateMap ::= [
  "binaryOperation" : "binaryOpertaionExpr",
  "unaryOperation" :  "unaryOperationExpr",
  "castOperation" :   "castOperationExpr",
  "literal" :         "literalExpr"
]


typedefVarDef(type, name) ::= <<
<type.name; format="toCName"> <name>
>>

varDefTemplateMap ::= [
  "enum" :          "enumVarDef",
  "enumRef" :       "enumRefVarDef",
  "struct" :        "structVarDef",
  "structRef" :     "structRefVarDef",
  "union" :         "unionVarDef",
  "unionRef" :      "unionRefVarDef",
  "pointerOf" :     "pointerOfVarDef",
  "arrayOf" :       "arrayOfVarDef",
  "primitiveType" : "simpleVarDef",
  "typedefRef" :    "typedefVarDef"
]

primitiveTypeNameMap ::= [
  "string" : "__MIND_STRING_TYPEDEF"
]

thisPointerDef ::= [
  "true" : "void *_mind_this",
  "typed" : "CONTEXT_PTR_DECL",
  "false" : ""
]

thisPointerComma ::= [
  "true" : ",",
  "typed" : ",",
  "false" : ""
]

noParamVoid ::= [
  "true" : "",
  "typed" : "",
  "false" : "void"
]

vaArgsMap ::= [
   "true" : "true",
   default :
]


methodMethName(itf,method) ::= "METH(<itf>,<method>)"

methodMethDef(itf, method, withThisPtr) ::= <<
<methodDef(method=method, methodName=methodMethName(itf=itf.name, method=method.name), withThisPtr=withThisPtr)>
>>

methodDef(method, methodName, withThisPtr) ::= <<
<typeQualifier(qualifiers=method)><varDef(type=method.type, name=methodPrototype(name=methodName, parameters=method.parameters, withThisPtr=withThisPtr, vaArgs=method.vaArgs))>
>>

methodPrototype(name, parameters, withThisPtr, vaArgs) ::= <<
<name>(<thisPointerDef.(withThisPtr)> <if(parameters)>
<thisPointerComma.(withThisPtr)> <parameters:parameterDef(parameter=it); separator=", "> <if (vaArgs)>, ...<endif>
<else> 
<if (vaArgs)> <thisPointerComma.(withThisPtr)> ...
<else>
<noParamVoid.(withThisPtr)> 
<endif>
<endif>)
>>

parameterDef(parameter) ::= <<
<typeQualifier(qualifiers=parameter)><varDef(type=parameter.type, name=parameterName(parameter=parameter))>
>>

parameterName(parameter) ::= <<
<if (parameter.isOut)>
<outParameterTemplateMap.(parameter.isOut)>
<else>
<outParameterTemplateMap.false>
<endif>
>>

outParameterTemplateMap ::= [
  "true"  : "(*<parameter.name>)",
  "false" : "<parameter.name>",
  default : "<parameter.name>"
]

ControllerGlobalDecls(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:ControllerGlobalDecl(definition=definition, ctrl=it);separator="\n">
<endif>
>>

ControllerGlobalDecl(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerGlobalDecl)(definition=definition, controller=ctrl)>};separator="\n">
>>

// -----------------------------------------------------------------------------
// Used interface definitions

UsedInterfaceDefinitions(definition) ::= <<
<definition.astDecorations.("used-interface-definition").values:UsedInterfaceDefinition(usedItfName=it.interfaceName); separator="\n">
>>

UsedInterfaceDefinition(usedItfName) ::= <<
#include "<usedItfName; format="nameToPath">.itf.h"
>>

// -----------------------------------------------------------------------------
// Internal data type generation

TypeStructures(definition) ::= <<
<if (definition.interfaces)>
  struct {
    <definition.interfaces:InterfaceDescriptorDecl(itf=it); separator="\n">
  } type;
<endif>
<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
  struct {
    <definition.internalInterfaces:InterfaceDescriptorDecl(itf=it); separator="\n">
  } inner_type;
<endif>
<endif>
>>

InterfaceDescriptorDecl(itf) ::= <<
<if (isClient.(itf.role))>
<InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
<else>
<InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
<endif>
>>

SubComponentStructures(definition) ::= <<
<if (definition.astNodeTypes.("component"))>
<if (definition.components)>
  struct {
    <definition.components:ComponentDescriptorDecl(component=it); separator="\n">
  } components;
<endif>
<endif>
>>

ComponentDescriptorDecl(component) ::= <<
  <ComponentTypeName(definitionName=component.definitionReference.name)> *<component.name> ;
>>


AttributeStructures(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))>
<if (definition.attributes)>
  struct <definition.name;format="toCName">_attributes_s {
    <definition.attributes:AttributeDecl(attr=it); separator="\n">
  };
  typedef struct <definition.name;format="toCName">_attributes_s <definition.name;format="toCName">_attributes_t;
  __MIND_ATTRIBUTE_UNUSED static <definition.name;format="toCName">_attributes_t ATTRIBUTE_STRUCT_NAME;
<endif>
<endif>
>>

AttributeDecl(attr) ::= <<
<if (attrTypeNameMap.(attr.type))>
<attrTypeNameMap.(attr.type)> <attr.name>;
<else>
<attr.type> <attr.name>;
<endif>
>>

attrTypeNameMap ::= [
  "string" : "const char*"
]


DataFieldStructures(definition) ::= <<
<if (definition.astNodeTypes.("dataField"))>
<if (definition.dataFields)>
  struct {
    <definition.dataFields:DataFieldDecl(dataField=it); separator="\n">
  } dataFields;
<endif>
<endif>
>>

DataFieldDecl(dataField) ::= <<
<if (attrTypeNameMap.(dataField.type))>
<attrTypeNameMap.(dataField.type)> <dataField.name>;
<else>
<dataField.type> <dataField.name>;
<endif>
>>


ControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:ControllerDataDecl(definition=definition, ctrl=it)>
<endif>
>>

ControllerDataDecl(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerData)(definition=definition, controller=ctrl)>}>
>>

// -----------------------------------------------------------------------------
// Component typedef

PrivateDecl(definition) ::= <<
<if (definition.astNodeTypes.("data"))>
<if (definition.data)>
<if (definition.data.cCode)>
/* Start inlined data code */
<definition.data.astSource; format="sourceTo#line">
<definition.data.cCode>
/* End inlined data code. */
<elseif (definition.data.path)>
/* Include data file */
#include "<definition.data.path; format="toCPath">"
<else>
/* No private data */
<endif>
<endif>
<endif>
>>

// -----------------------------------------------------------------------------
// V-Table declaration

ComponentVTableDecl(definition) ::= <<
/* Start declaration of server interface V-Tables. */
<definition.interfaces:ServerInterfaceVTableDecl(definition=definition, itf=it); separator="\n">
/* End declaration of server interface V-Tables. */

<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
/* Start declaration of internal server interface V-Tables */
<definition.internalInterfaces:ServerInterfaceVTableDecl(definition=definition, itf=it); separator="\n">
/* End declaration of internal server interface V-Tables */
<endif>
<endif>
>>

ServerInterfaceVTableDecl(definition, itf) ::= <<
<if(isServer.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{index | extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf,index=index)>;};separator="\n">
<else>
extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf)>;
<endif>
<endif>
>>


// -----------------------------------------------------------------------------
// Factory macros

FactoryDef(definition) ::= <<
#define <definition.name;format="toUpperCName">_DECLARE_INSTANCE(instance_name) \
extern <ComponentTypeName(definitionName=definition.name)> instance_name;

#define <definition.name;format="toUpperCName">_INIT_INSTANCE(instance_name<AddItfNames(definition=definition)><AddSubComponentNames(definition=definition)><AddAttributeNames(definition=definition)><AddControllersDataNames(definition=definition)>) \
<InitializeGlobalControllerStructures(definition=definition)><ComponentTypeName(definitionName=definition.name)> instance_name = { \
  { /* __component_internal_data: */ \
<InitializeInterfaces(definition=definition)><InitializeComponents(definition=definition)><InitializeControllerStructures(definition=definition)><InitializeAttributes(definition=definition)>  } \
};

/* Duplicate-definition fix for some families of compilers such as IAR */
#define <definition.name;format="toUpperCName">_DECLARE_PRIVATEDATA(private_name) \
SINGLETON_PRIVATE_DATA_T private_name;

int __component_<definition.name;format="toCName">_factory(void **instance, void *allocItf <ComponentFactoryParameters(definition=definition)>);
int __component_<definition.name;format="toCName">_destroy(void *instance, void *allocItf);
>>

AddItfNames(definition) ::= <<
<definition.interfaces:AddItfName(itf=it)><if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
<definition.internalInterfaces:AddItfName(itf=it)>
<endif>
<endif>
>>

AddItfName(itf) ::= <<
<if (isClient.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{, <itf.name>_<it>_ptr, <itf.name>_<it>_instance, <itf.name>_<it>_vTable}>
<else>
, <itf.name>_ptr, <itf.name>_instance, <itf.name>_vTable
<endif>
<endif>
>>

AddSubComponentNames(definition) ::= <<
<if (definition.astNodeTypes.("component"))><definition.components:{, <it.name>}><endif>
>>

AddAttributeNames(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))><definition.attributes:{<if (it.value)>, <it.name><endif>}><endif>
>>


InitializeInterfaces(definition) ::= <<
<if (definition.interfaces)>    { /* type: */ \
      <definition.interfaces:{/* <it.name> : */ <InitializeInterface(definition=definition, itf=it)>}; separator=", \\\n      " > \
    }, \
<endif><if (definition.astNodeTypes.("internalInterface"))><if (definition.internalInterfaces)>    { /* inner_type */ \
      <definition.internalInterfaces:{/* <it.name> : */ <InitializeInterface(definition=definition, itf=it)>}; separator=", \\\n      " > \
    }, \
<endif><endif>
>>

InitializeInterface(definition, itf) ::= <<
<if(isClient.(it.role))>
<InitializeClientInterface(definition=definition, itf=it)>
<else>
<InitializeServerInterface(definition=definition, itf=it)>
<endif>
>>

InitializeClientInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
{<itf.astDecorations.("collectionIndexes"):{ <itf.name>_<it>_ptr}; separator=", ">}
<else>
<itf.name>_ptr
<endif>
>>

InitializeServerInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
{<itf.astDecorations.("collectionIndexes"):{ {&instance_name, &<vTableInstanceName(definition=definition,itf=itf, index=it)>, <isBoundValue(definition=definition, itf=itf, index=it)>}}; separator=", ">}
<else>
{&instance_name, &<vTableInstanceName(definition=definition,itf=itf)>, <isBoundValue(definition=definition, itf=itf)>}
<endif>
>>

isBoundValue(definition, itf, index) ::= <<
<if (itf.astDecorations.("delegated-interface"))>
<itf.astDecorations.("delegated-interface").name><if (index)>_<index><endif>_ptr
<else>
&instance_name
<endif>
>>

InitializeComponents(definition) ::= <<
<if (definition.astNodeTypes.("component"))><if (definition.components)>    { /* components */ \
      <definition.components:{&(<it.name>)}; separator=", \\\n      "> \
    }, \
<endif><endif>
>>  

InitializeAttributes(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))><if (definition.attributes)>    {  /* attributes: */ \
    <definition.attributes:{<if (it.value)>/* <it.name> : */ <it.name>, <endif>}> \
    }, \
<endif><endif>
>>

InitializeGlobalControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:InitializeGlobalControllerStructure(definition=definition, ctrl=it)>
<endif>
>>

InitializeGlobalControllerStructure(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerGlobalDataStaticInit)(definition=definition, controller=ctrl)>}>
>>

AddControllersDataNames(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:AddControllerDataNames(definition=definition, ctrl=it)>
<endif>
>>

AddControllerDataNames(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerDataNames)(definition=definition, controller=ctrl)>}>
>>

InitializeControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:InitializeControllerData(definition=definition, ctrl=it)>
<endif>
>>

InitializeControllerData(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerDataStaticInit)(definition=definition, controller=ctrl)>}>
>>


ComponentFactoryParameters(definition) ::= <<
<if (definition.astNodeTypes.("formalParameter"))>
<definition.formalParameters:ComponentFactoryParameter(definition=definition, parameter=it)>
<endif>
>>

ComponentFactoryParameter(definition, parameter) ::= <<
, 
<if (parameter.astDecorations.("inferred-type"))>
<parameter.astDecorations.("inferred-type").cType> <parameter.name;format="toCName">
<else>
int <parameter.name;format="toCName">
<endif>
>>

}$$ 
}